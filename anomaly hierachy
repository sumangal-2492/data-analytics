import pandas as pd

def detect_top_outliers(data, key_columns):
    # Grouping the data and calculating sum of spend
    grouped_data = data.groupby(key_columns).agg(Total_Spend=('Spend', 'sum')).reset_index()
    
    # Calculating IQR and median
    Q1 = grouped_data['Total_Spend'].quantile(0.25)
    Q3 = grouped_data['Total_Spend'].quantile(0.75)
    IQR = Q3 - Q1
    median_spend = grouped_data['Total_Spend'].median()
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    
    # Identifying outliers
    outliers = grouped_data[(grouped_data['Total_Spend'] < lower_bound) | (grouped_data['Total_Spend'] > upper_bound)]
    
    # Calculating deviations from median and sorting
    outliers['Deviation'] = (outliers['Total_Spend'] - median_spend).abs()
    outliers_sorted = outliers.sort_values(by='Deviation', ascending=False).head(5)
    
    return outliers_sorted

def main():
    # Load the data from an Excel file
    file_path = 'path_to_your_file.xlsx'  # Change this to your file path
    data = pd.read_excel(file_path)
    
    # Applying the function to each level
    outliers_level_1 = detect_top_outliers(data, ['Year', 'Month'])
    outliers_level_2 = detect_top_outliers(data, ['Year', 'Month', 'Commodity'])
    outliers_level_3 = detect_top_outliers(data, ['Year', 'Month', 'Commodity', 'Supplier'])
    
    # Print the results
    print("Level 1 Outliers (Monthly Spend):")
    print(outliers_level_1)
    print("\nLevel 2 Outliers (Spend by Commodity within each Month):")
    print(outliers_level_2)
    print("\nLevel 3 Outliers (Spend by Supplier within each Commodity and Month):")
    print(outliers_level_3)

if __name__ == "__main__":
    main()


*****************************************************************************************************************************

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load the data
data = pd.read_excel('path_to_your_file.xlsx')

# Filter data for the years of interest, assuming they are 2023 and 2024
data_filtered = data[(data['Year'] == 2023) | (data['Year'] == 2024)]

# Define a function for outlier detection using IQR
def detect_outliers(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    return data[(data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))]

# Data aggregation and outlier detection at different levels
def analyze_level(group_columns):
    group_data = data_filtered.groupby(['Year'] + group_columns).agg({'Spend': 'sum'}).unstack(level=0)
    spend_diff = group_data.diff(axis=1).droplevel(0, axis=1).iloc[:, -1]
    outliers = detect_outliers(spend_diff)
    return spend_diff, outliers

# Analyze each level
level_1_diff, outliers_level_1 = analyze_level(['Month'])
level_2_diff, outliers_level_2 = analyze_level(['Month', 'Commodity'])
level_3_diff, outliers_level_3 = analyze_level(['Month', 'Commodity', 'Supplier'])

# Visualization of results
plt.figure(figsize=(18, 5))
plt.subplot(1, 3, 1)
sns.boxplot(y=level_1_diff).set_title('Level 1: Month')
plt.subplot(1, 3, 2)
sns.boxplot(y=level_2_diff).set_title('Level 2: Month + Commodity')
plt.subplot(1, 3, 3)
sns.boxplot(y=level_3_diff).set_title('Level 3: Month + Commodity + Supplier')
plt.tight_layout()
plt.show()
********************************************************************************

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Generate some data
data = np.random.normal(loc=0, scale=1, size=1000)

# Create a histogram with a density plot
sns.histplot(data, kde=True, stat="density", color="skyblue")

# Add a boxplot to show the IQR
sns.boxplot(x=data, color="red", width=0.3, whis=np.inf, fliersize=0)

# Enhance the display
plt.title("Distribution with IQR Highlighted")
plt.xlabel("Data Values")
plt.ylabel("Density")

# Show the plot
plt.show()
*********************************************************************************

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load the data
data = pd.read_excel('path_to_your_file.xlsx')

# Define a function for outlier detection using IQR that returns the bounds
def detect_outliers_bounds(series):
    Q1 = series.quantile(0.25)
    Q3 = series.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return lower_bound, upper_bound

# Aggregate data and append outlier flags
def analyze_and_flag(group_columns):
    # Aggregate the data
    aggregated_data = data.groupby(['Year'] + group_columns).agg({'Spend': 'sum'}).reset_index()
    
    # Calculate spend difference between years
    pivot_table = aggregated_data.pivot_table(values='Spend', index=group_columns, columns='Year', fill_value=0)
    pivot_table['Spend_Difference'] = pivot_table.diff(axis=1).iloc[:, -1]
    
    # Detect outliers in the spend difference
    lower_bound, upper_bound = detect_outliers_bounds(pivot_table['Spend_Difference'])
    pivot_table['Outlier_Flag'] = np.where((pivot_table['Spend_Difference'] < lower_bound) | 
                                           (pivot_table['Spend_Difference'] > upper_bound), -1, 0)
    
    # Merge the outlier flags back to the original data
    final_data = pd.merge(data, pivot_table[['Spend_Difference', 'Outlier_Flag']], on=group_columns, how='left')
    return final_data

# Example usage for a specific level
# You can call this function for each level you want to analyze
final_data_level_1 = analyze_and_flag(['Month'])
final_data_level_2 = analyze_and_flag(['Month', 'Commodity'])
final_data_level_3 = analyze_and_flag(['Month', 'Commodity', 'Supplier'])

# Optionally, you can save the results to a new Excel file
final_data_level_3.to_excel('outlier_flagged_data.xlsx', index=False)
***************************************************************************************
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load the data
data = pd.read_excel('path_to_your_file.xlsx')

# Define a function for outlier detection using IQR and flagging
def flag_outliers(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    outlier_condition = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))
    return np.where(outlier_condition, -1, 0)  # Return -1 for outliers, 0 for others

# Data aggregation, outlier detection, and dataset preparation at different levels
def analyze_level(group_columns):
    group_data = data.groupby(['Year'] + group_columns).agg({'Spend': 'sum'}).unstack(level=0)
    spend_diff = group_data.diff(axis=1).droplevel(0, axis=1).iloc[:, -1]
    outliers_flag = flag_outliers(spend_diff)
    # Prepare the result dataset
    result = spend_diff.reset_index()
    result['Outlier_Flag'] = outliers_flag
    return result

# Analyze each level
result_level_1 = analyze_level(['Month'])
result_level_2 = analyze_level(['Month', 'Commodity'])
result_level_3 = analyze_level(['Month', 'Commodity', 'Supplier'])

# Visualization of results
plt.figure(figsize=(18, 5))
plt.subplot(1, 3, 1)
sns.boxplot(y=result_level_1['Spend']).set_title('Level 1: Month')
plt.subplot(1, 3, 2)
sns.boxplot(y=result_level_2['Spend']).set_title('Level 2: Month + Commodity')
plt.subplot(1, 3, 3)
sns.boxplot(y=result_level_3['Spend']).set_title('Level 3: Month + Commodity + Supplier')
plt.tight_layout()
plt.show()
****************************************************************************************************************************


import pandas as pd
import numpy as np

# Load your data
file_path = 'path_to_your_file.xlsx'  # Replace with your file path
data = pd.read_excel(file_path)

# Filter the data for the years of interest
data_filtered = data[(data['Year'] == 2023) | (data['Year'] == 2024)]

# Function to compute Z-score and mark outliers
def mark_outliers(data, group_cols, spend_col='Spend', threshold=3):
    # Group the data and calculate differences
    data_grouped = data.groupby(group_cols)[spend_col].sum().reset_index()
    data_grouped['Difference'] = data_grouped.groupby(group_cols[:-1])[spend_col].diff()
    
    # Calculate mean and std dev of the differences
    mean_diff = data_grouped['Difference'].mean()
    std_diff = data_grouped['Difference'].std()
    
    # Calculate Z-scores
    data_grouped['Z-Score'] = (data_grouped['Difference'] - mean_diff) / std_diff
    
    # Mark outliers
    data_grouped['Outlier'] = np.where(abs(data_grouped['Z-Score']) > threshold, -1, 1)
    
    return data_grouped

# Applying the function at each level
outliers_level_1 = mark_outliers(data_filtered, ['Year', 'Month'])
outliers_level_2 = mark_outliers(data_filtered, ['Year', 'Month', 'Commodity'])
outliers_level_3 = mark_outliers(data_filtered, ['Year', 'Month', 'Commodity', 'Supplier'])

# Display the outlier data frames
print("Outliers at Level 1 (Month):")
print(outliers_level_1)
print("\nOutliers at Level 2 (Month + Commodity):")
print(outliers_level_2)
print("\nOutliers at Level 3 (Month + Commodity + Supplier):")
print(outliers_level_3)
*****************************************************************************************************


import pandas as pd
import numpy as np

# Load the data from an Excel file
def load_data(file_path):
    return pd.read_excel(file_path)

# Calculate spend differences and detect outliers
def calculate_spend_diff_and_outliers(df, grouping_columns):
    # Group by specified columns and Year, then calculate total spend
    grouped_spend = df.groupby(grouping_columns + ['Year'])['Spend'].sum().unstack(fill_value=0)
    # Calculate spend difference between 2023 and 2022
    grouped_spend['Spend Difference'] = grouped_spend[2023] - grouped_spend[2022]
    # Compute Z-score for the spend differences
    grouped_spend['Z-Score'] = (grouped_spend['Spend Difference'] - grouped_spend['Spend Difference'].mean()) / grouped_spend['Spend Difference'].std()
    # Classify outliers
    grouped_spend['Outlier'] = np.where((grouped_spend['Z-Score'].abs() > 3), -1, 1)
    # Reset index to flatten the DataFrame
    result = grouped_spend.reset_index()
    return result[['Spend Difference', 'Z-Score', 'Outlier'] + grouping_columns]

# Main function to run the analysis
def analyze_spend(file_path):
    # Load data
    data = load_data(file_path)
    # Filter data for years 2022 and 2023
    filtered_data = data[(data['Year'] == 2022) | (data['Year'] == 2023)]
    
    # Calculate for each hierarchy level
    level1 = calculate_spend_diff_and_outliers(filtered_data, ['Month'])
    level2 = calculate_spend_diff_and_outliers(filtered_data, ['Month', 'Commodity'])
    level3 = calculate_spend_diff_and_outliers(filtered_data, ['Month', 'Commodity', 'Supplier'])
    
    # Concatenate results for a comprehensive view
    final_df = pd.concat([level1, level2, level3])
    final_df.reset_index(drop=True, inplace=True)
    
    return final_df

# Example usage
file_path = 'path_to_your_excel_file.xlsx'  # Replace with your actual file path
final_results = analyze_spend(file_path)
print(final_results.head())
