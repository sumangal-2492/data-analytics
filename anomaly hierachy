import pandas as pd

def detect_top_outliers(data, key_columns):
    # Grouping the data and calculating sum of spend
    grouped_data = data.groupby(key_columns).agg(Total_Spend=('Spend', 'sum')).reset_index()
    
    # Calculating IQR and median
    Q1 = grouped_data['Total_Spend'].quantile(0.25)
    Q3 = grouped_data['Total_Spend'].quantile(0.75)
    IQR = Q3 - Q1
    median_spend = grouped_data['Total_Spend'].median()
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    
    # Identifying outliers
    outliers = grouped_data[(grouped_data['Total_Spend'] < lower_bound) | (grouped_data['Total_Spend'] > upper_bound)]
    
    # Calculating deviations from median and sorting
    outliers['Deviation'] = (outliers['Total_Spend'] - median_spend).abs()
    outliers_sorted = outliers.sort_values(by='Deviation', ascending=False).head(5)
    
    return outliers_sorted

def main():
    # Load the data from an Excel file
    file_path = 'path_to_your_file.xlsx'  # Change this to your file path
    data = pd.read_excel(file_path)
    
    # Applying the function to each level
    outliers_level_1 = detect_top_outliers(data, ['Year', 'Month'])
    outliers_level_2 = detect_top_outliers(data, ['Year', 'Month', 'Commodity'])
    outliers_level_3 = detect_top_outliers(data, ['Year', 'Month', 'Commodity', 'Supplier'])
    
    # Print the results
    print("Level 1 Outliers (Monthly Spend):")
    print(outliers_level_1)
    print("\nLevel 2 Outliers (Spend by Commodity within each Month):")
    print(outliers_level_2)
    print("\nLevel 3 Outliers (Spend by Supplier within each Commodity and Month):")
    print(outliers_level_3)

if __name__ == "__main__":
    main()


*****************************************************************************************************************************

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load the data
data = pd.read_excel('path_to_your_file.xlsx')

# Filter data for the years of interest, assuming they are 2023 and 2024
data_filtered = data[(data['Year'] == 2023) | (data['Year'] == 2024)]

# Define a function for outlier detection using IQR
def detect_outliers(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    return data[(data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))]

# Data aggregation and outlier detection at different levels
def analyze_level(group_columns):
    group_data = data_filtered.groupby(['Year'] + group_columns).agg({'Spend': 'sum'}).unstack(level=0)
    spend_diff = group_data.diff(axis=1).droplevel(0, axis=1).iloc[:, -1]
    outliers = detect_outliers(spend_diff)
    return spend_diff, outliers

# Analyze each level
level_1_diff, outliers_level_1 = analyze_level(['Month'])
level_2_diff, outliers_level_2 = analyze_level(['Month', 'Commodity'])
level_3_diff, outliers_level_3 = analyze_level(['Month', 'Commodity', 'Supplier'])

# Visualization of results
plt.figure(figsize=(18, 5))
plt.subplot(1, 3, 1)
sns.boxplot(y=level_1_diff).set_title('Level 1: Month')
plt.subplot(1, 3, 2)
sns.boxplot(y=level_2_diff).set_title('Level 2: Month + Commodity')
plt.subplot(1, 3, 3)
sns.boxplot(y=level_3_diff).set_title('Level 3: Month + Commodity + Supplier')
plt.tight_layout()
plt.show()
