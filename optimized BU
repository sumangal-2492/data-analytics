import pandas as pd
import plotly.graph_objects as go
from sklearn.ensemble import IsolationForest
import ipywidgets as widgets
from IPython.display import display, clear_output

# Load and prepare the data
data_path = 'TEST (1).xlsx'  # Adjust this path to your file location
data = pd.read_excel(data_path)
data['Month Name'] = data['Month'].apply(lambda x: pd.to_datetime(x, format='%m').strftime('%b'))

# Precompute anomaly detection to optimize
def add_anomalies(df):
    model = IsolationForest(n_estimators=100, contamination='auto', random_state=42)
    df['Anomaly'] = model.fit_predict(df[['Spend']])
    return df

data_grouped = data.groupby(['Year', 'Month', 'Month Name', 'Commodity'], as_index=False).agg({'Spend': 'sum'})
data_with_anomalies = add_anomalies(data_grouped)

# Plot functions
def plot_spend_vs_month(commodity):
    fig = go.Figure()
    df_filtered = data_with_anomalies[data_with_anomalies['Commodity'] == commodity]
    years = sorted(df_filtered['Year'].unique())
    colors = ['green', 'lightblue']  # Assuming two years for simplicity

    for year, color in zip(years, colors):
        df_year = df_filtered[df_filtered['Year'] == year]
        fig.add_trace(go.Scatter(x=df_year['Month Name'], y=df_year['Spend'],
                                 mode='lines+markers', name=f'Year {year}',
                                 line=dict(color=color),
                                 marker=dict(color=df_year['Anomaly'].apply(lambda x: 'red' if x == -1 else color))))
    
    fig.update_layout(title=f'Monthly Spend for {commodity}', xaxis_title='Month', yaxis_title='Spend')
    fig.show()

def plot_bu_vs_spend(commodity, month_name, year):
    selected_month = pd.to_datetime(month_name, format='%b').month
    df_filtered = data[(data['Commodity'] == commodity) & (data['Month'] == selected_month) & (data['Year'] == year)]
    df_grouped = df_filtered.groupby('Business Unit')['Spend'].sum().reset_index()
    
    fig = go.Figure(data=[go.Bar(x=df_grouped['Business Unit'], y=df_grouped['Spend'], marker_color='skyblue')])
    fig.update_layout(title=f"BU Spend for {commodity} in {month_name} {year}", xaxis_title='Business Unit', yaxis_title='Spend')
    fig.show()

# Widgets setup
commodity_dropdown = widgets.Dropdown(options=sorted(data['Commodity'].unique()), description='Commodity:')
month_dropdown = widgets.Dropdown(options=[pd.to_datetime(x, format='%m').strftime('%b') for x in range(1, 13)], description='Month:', value='Jan')
year_dropdown = widgets.Dropdown(options=sorted(data['Year'].unique()), description='Year:', value=sorted(data['Year'].unique())[-1])

# Update function
def update_plots(change):
    clear_output(wait=True)
    display(commodity_dropdown, month_dropdown, year_dropdown)
    plot_spend_vs_month(commodity_dropdown.value)
    plot_bu_vs_spend(commodity_dropdown.value, month_dropdown.value, year_dropdown.value)

# Attach the update function to the widgets
commodity_dropdown.observe(update_plots, names='value')
month_dropdown.observe(update_plots, names='value')
year_dropdown.observe(update_plots, names='value')

# Display widgets and initial plots
display(commodity_dropdown, month_dropdown, year_dropdown)
update_plots(None)  # Initial call to display plots
