import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.ensemble import IsolationForest
import ipywidgets as widgets
from IPython.display import display

# Load and prepare the data
data_path = 'TEST (1).xlsx'  # Update this path to your file location
data = pd.read_excel(data_path)

# Adding Month Name for better readability
data['Month Name'] = data['Month'].apply(lambda x: pd.to_datetime(x, format='%m').strftime('%b'))

# Initialize Isolation Forest for anomaly detection
model = IsolationForest(n_estimators=100, contamination='auto', random_state=42)

def preprocess_and_detect_anomalies(df):
    """Anomaly detection within each commodity group."""
    df['Anomaly'] = model.fit_predict(df[['Spend']].values)
    return df

# Apply preprocessing and anomaly detection
data['Anomaly'] = 0  # Initialize the column to store anomaly detection results
grouped_data = data.groupby(['Commodity', 'Year', 'Month', 'Month Name'], as_index=False).agg({'Spend': 'sum'})
grouped_data = grouped_data.groupby('Commodity').apply(preprocess_and_detect_anomalies).reset_index(drop=True)

# Plotting function that utilizes preprocessed data with commodity filtering
def plot_data(commodity, month_name, year):
    fig = make_subplots(rows=1, cols=2, subplot_titles=('Monthly Spend', 'BU Spend'), column_widths=[0.7, 0.3])

    # Filter data for the selected commodity
    df_commodity = grouped_data[grouped_data['Commodity'] == commodity]
    
    # Monthly Spend Plot
    for y in df_commodity['Year'].unique():
        df_year = df_commodity[df_commodity['Year'] == y]
        color = 'green' if y == 2022 else 'lightblue'
        fig.add_trace(go.Scatter(x=df_year['Month Name'], y=df_year['Spend'], mode='lines+markers',
                                 name=f'Year {y}', marker=dict(color=df_year['Anomaly'].map({1: color, -1: 'red'}))),
                      row=1, col=1)
    
    # BU Spend Plot for the selected month and year
    df_bu = data[(data['Commodity'] == commodity) & (data['Year'] == year) & (data['Month Name'] == month_name)]
    df_bu_grouped = df_bu.groupby('Business Unit')['Spend'].sum().reset_index()
    fig.add_trace(go.Bar(x=df_bu_grouped['Business Unit'], y=df_bu_grouped['Spend'], name='BU Spend', marker_color='skyblue'), row=1, col=2)

    # Update layout for better readability
    fig.update_layout(title_text=f"{commodity} Spend Overview: {month_name} {year}", showlegend=True)
    fig.show()

# Widgets for interactive selection
commodity_dropdown = widgets.Dropdown(options=sorted(data['Commodity'].unique()), description='Commodity:', value=sorted(data['Commodity'].unique())[0])
month_dropdown = widgets.Dropdown(options=[pd.to_datetime(x, format='%m').strftime('%b') for x in range(1, 13)], description='Month:', value='Jan')
year_dropdown = widgets.Dropdown(options=sorted(data['Year'].unique()), description='Year:', value=sorted(data['Year'].unique())[0])

# Update function with widgets
def update_plots(change):
    plot_data(commodity_dropdown.value, month_dropdown.value, year_dropdown.value)

# Attach update function to widget changes
commodity_dropdown.observe(update_plots, names='value')
month_dropdown.observe(update_plots, names='value')
year_dropdown.observe(update_plots, names='value')

# Display widgets and initial plot
display(commodity_dropdown, month_dropdown, year_dropdown)
update_plots(None)  # Initial plot display
