import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.ensemble import IsolationForest
import ipywidgets as widgets
from IPython.display import display

# Load and prepare the data
data_path = 'TEST (1).xlsx'  # Update this path to your file location
data = pd.read_excel(data_path)

# Pre-compute and store the anomaly detection to improve performance
model = IsolationForest(n_estimators=100, contamination='auto', random_state=42)
data['Month Name'] = data['Month'].apply(lambda x: pd.to_datetime(x, format='%m').strftime('%b'))

def preprocess_data(df):
    """Preprocess data for plotting, including anomaly detection."""
    df_grouped = df.groupby(['Year', 'Month', 'Month Name'], as_index=False).agg({'Spend': 'sum'})
    df_grouped['Anomaly'] = model.fit_predict(df_grouped[['Spend']])
    return df_grouped

preprocessed_data = data.groupby('Commodity').apply(preprocess_data).reset_index(drop=True)

# Plotting function
def plot_data(commodity, month_name, year):
    df = preprocessed_data[preprocessed_data['Commodity'] == commodity]
    selected_month = pd.to_datetime(month_name, format='%b').month

    # Subplot setup
    fig = make_subplots(rows=1, cols=2, subplot_titles=('Monthly Spend', 'BU Spend'),
                        horizontal_spacing=0.2)

    # Monthly Spend Plot
    for i, year in enumerate(df['Year'].unique()):
        df_year = df[df['Year'] == year]
        fig.add_trace(go.Scatter(x=df_year['Month Name'], y=df_year['Spend'], name=f'Year {year}',
                                 mode='markers+lines', marker=dict(color=['red' if x == -1 else 'green' if year == 2022 else 'lightblue' for x in df_year['Anomaly']])),
                      row=1, col=1)

    # BU Spend Plot
    df_bu_spend = data[(data['Commodity'] == commodity) & (data['Month'] == selected_month) & (data['Year'] == year)]
    df_bu_grouped = df_bu_spend.groupby('Business Unit')['Spend'].sum().reset_index()
    fig.add_trace(go.Bar(x=df_bu_grouped['Business Unit'], y=df_bu_grouped['Spend'],
                         marker_color='skyblue'), row=1, col=2)

    # Update layout
    fig.update_layout(title_text=f'Data for {commodity} in {month_name} {year}', showlegend=False)
    fig.show()

# Widgets for interactive selection
commodity_dropdown = widgets.Dropdown(options=sorted(data['Commodity'].unique()), description='Commodity:', value=sorted(data['Commodity'].unique())[0])
month_dropdown = widgets.Dropdown(options=[pd.to_datetime(x, format='%m').strftime('%b') for x in range(1, 13)], description='Month:', value='Jan')
year_dropdown = widgets.Dropdown(options=sorted(data['Year'].unique()), description='Year:', value=sorted(data['Year'].unique())[0])

# Update function with widgets
def update_plots(change):
    plot_data(commodity_dropdown.value, month_dropdown.value, year_dropdown.value)

# Attach update function to widget changes
commodity_dropdown.observe(update_plots, names='value')
month_dropdown.observe(update_plots, names='value')
year_dropdown.observe(update_plots, names='value')

# Display widgets
display(commodity_dropdown, month_dropdown, year_dropdown)

# Initial plot
update_plots(None)
