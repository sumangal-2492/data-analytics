import pandas as pd
from sklearn.ensemble import IsolationForest

# Load the data
file_path = '/mnt/data/dummy.xlsx'
data = pd.read_excel(file_path)

# Aggregate Spend by Year, Month, Commodity, Business Unit, and Supplier
data_aggregated = data.groupby(['Year', 'Month', 'Commodity', 'Business Unit', 'Supplier']).agg({'Spend': 'sum'}).reset_index()

# Sort data to ensure correct YOY calculation
data_aggregated.sort_values(by=['Commodity', 'Business Unit', 'Supplier', 'Year', 'Month'], inplace=True)

# Calculate the spend difference YOY
data_aggregated['Prev_Year_Spend'] = data_aggregated.groupby(['Commodity', 'Business Unit', 'Supplier', 'Month'])['Spend'].shift(1)
data_aggregated['Spend_Difference'] = data_aggregated['Spend'] - data_aggregated['Prev_Year_Spend']

# Drop rows without previous year data
data_aggregated.dropna(subset=['Spend_Difference'], inplace=True)

# Apply Isolation Forest
isolation_forest = IsolationForest(n_estimators=100, contamination=0.05)  # Adjust contamination as needed
data_aggregated['Anomaly_Score'] = isolation_forest.fit_predict(data_aggregated[['Spend_Difference']])

# Mark anomalies
data_aggregated['Anomaly_Detected'] = data_aggregated['Anomaly_Score'].apply(lambda x: 'Yes' if x == -1 else 'No')

# Function to infer potential causes of anomalies
def infer_causes(row):
    if row['Anomaly_Detected'] == 'Yes':
        causes = []
        # Compare spend differences with other entries
        mean_diff = data_aggregated[(data_aggregated['Month'] == row['Month']) & (data_aggregated['Commodity'] != row['Commodity'])]['Spend_Difference'].mean()
        if abs(row['Spend_Difference']) > abs(mean_diff):
            causes.append('Commodity Change')

        mean_diff = data_aggregated[(data_aggregated['Month'] == row['Month']) & (data_aggregated['Supplier'] != row['Supplier'])]['Spend_Difference'].mean()
        if abs(row['Spend_Difference']) > abs(mean_diff):
            causes.append('Supplier Change')

        mean_diff = data_aggregated[(data_aggregated['Month'] == row['Month']) & (data_aggregated['Business Unit'] != row['Business Unit'])]['Spend_Difference'].mean()
        if abs(row['Spend_Difference']) > abs(mean_diff):
            causes.append('Business Unit Change')

        return ', '.join(causes)
    return ''

# Apply the function to identify causes
data_aggregated['Inference'] = data_aggregated.apply(infer_causes, axis=1)

# Resultant DataFrame
result = data_aggregated[['Year', 'Month', 'Commodity', 'Business Unit', 'Supplier', 'Spend', 'Prev_Year_Spend', 'Spend_Difference', 'Anomaly_Detected', 'Inference']]
result.head()




***********************************


import pandas as pd
from sklearn.ensemble import IsolationForest

# Load the dataset
file_path = 'dummy.xlsx'  # Update this with your actual file path
data = pd.read_excel(file_path)

# Define the scenarios with required groupings
pivot_definitions = {
    'year_month': ['Year', 'Month'],
    'year_month_commodity': ['Year', 'Month', 'Commodity'],
    'year_month_commodity_supplier': ['Year', 'Month', 'Commodity', 'Supplier']
}

# Prepare and calculate spend differences
pivots = {}
for key, columns in pivot_definitions.items():
    # Group data by selected columns and sum Spend for each group
    group_data = data.groupby(columns).agg({'Spend': 'sum'}).reset_index()
    # Create a pivot table with years as columns and fill missing values with 0
    group_pivot = group_data.pivot_table(index=columns[:-1], columns='Year', values='Spend', fill_value=0)
    # Calculate spend differences, ensuring that both years are accounted for
    if 2022 in group_pivot.columns and 2023 in group_pivot.columns:
        group_pivot['Spend Difference'] = group_pivot[2023] - group_pivot[2022]
    else:
        group_pivot['Spend Difference'] = 0  # Default to 0 if any year is missing
    pivots[key] = group_pivot.reset_index()

# Function to detect outliers and add inference
def detect_outliers(data):
    if 'Spend Difference' in data.columns:
        clf = IsolationForest(contamination=0.1)  # Assuming 10% of the data as outliers
        data['outlier'] = clf.fit_predict(data[['Spend Difference']].values.reshape(-1, 1))
        data['outlier'] = data['outlier'].map({-1: 'yes', 1: 'no'})
    else:
        data['outlier'] = 'no'  # Default to no outliers if 'Spend Difference' cannot be calculated

    # Generate inference based on group_by conditions
    def generate_inference(row):
        reasons = []
        if 'Commodity' in data.columns:
            reasons.append('shifts in commodity types')
        if 'Supplier' in data.columns:
            reasons.append('changes in suppliers')
        if not reasons:
            reasons.append('seasonal variations or consistent spending patterns')

        return f"Outlier potentially due to {' and '.join(reasons)}." if row['outlier'] == 'yes' else "Spend within expected range."

    data['inference'] = data.apply(generate_inference, axis=1)
    return data

# Detecting outliers for each scenario and creating inference
results = {}
for key, df in pivots.items():
    results[key] = detect_outliers(df)

# Export results to CSV for Tableau
for key, result_df in results.items():
    filename = f'outlier_detection_{key}.csv'
    result_df.to_csv(filename, index=False)

# Optionally, show a sample of the results for verification
print(results['year_month_commodity_supplier'].head())

